# 基础算法部分  
按专题来实现一些算法，算法来源主要有：  
1. 《算法导论》里部分数据结构和算法  
2. 按模块收集在一起的常见算法题   
3. 自己实现的一些数据结构和算法   

## 1.1 分治法  
分治法（D&C）是解决规模庞大的问题的很好的思路，它通过降低问题的规模，形成若干个规模更小但形式相同的子问题，进行递归求解。在求解过后，将各个子问题的解合并起来，形成原问题的解。

*主要步骤为：*   
1. 分解（Divide）: 将大规模的问题分解成若干个规模更小但形式相同的子问题   
2. 解决（Conquer）: 如果当前问题的规模足够小，并可以直接解决的话，那么直接解决并返回解。否则，继续进行分解并递归求解分解后的子问题   
3. 合并（Merge: 将各个子问题合并，最终形成原问题的解   

写递归代码的关键就是找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后再推敲终止条件，最后将递推公式和终止条件翻译成代码。

*递归需要满足的三个条件：*   
- 一个问题的解可以分解为几个子问题的解   
- 子问题除了数据规模不一样，求解的方法是一致的   
- 一定要存在递归终止条件   

*编程实践经验：*   
- 先刻画出递归的公式和终止条件   
- 警惕栈溢出和性能问题，一旦n较大，存在较多的重复计算，造成严重的性能问题    
- 最好用循环代替递归   
- 一般在数组、链表、树相关问题上用分而治之，递归求解的较多，在遇到此类面试题时，需要首先想到此思路      

*用递归求解的常见问题：*   
- 归并和快排:`algorthms/sort/merge_sort, quick_sort`  
- fabonacci&青蛙跳台阶:`foroffer/question10`    
- 逆序对计数:`algorthms/array/countInversePair`    
- 最大子数组:`algorthms/array/MaximumContiguousSubarray`    
- 合并两个排序链表:`algorthms/linklist/mergeTwoSortLinklist`    

## 1.2 动态规划   
动态规划问题，本质是最优公共子问题的叠加，利用备忘录解决D&C中重复计算公共子问题     

*DP问题和DC问题的区别：*   
- 都是将问题划分为子问题进行求解   
- DC是将问题拆成独立的子问题，然后分别求解，最后合并   
- DP的子问题之间是由底而上不断递进，子问题之间是相关的      
- DP通常用于最优化问题求解，这类问题一般有多个解，找到最优的解   
- DP解法一般时间复杂度为O(N^2)，并且是以空间换时间，备忘录方法      

*动态规划的解题步骤：*     
1. 分析最优解的结构特征
2. 递归定义最优解的值(最难一步)   
3. 自底向上的求解最优值    
4. 回溯，记录最优解  

*代码注意点：*  
1. 一般是双层循环   
2. 表的初始化
3. 数组的下标是从0开始      

*实现的主要题目:*   
1. 0-1背包问题:`algorthms/dp/knapsack`    
2. 最长公共子序列问题和最长公共连续子序列问题:`algorthms/dp/lcs`     
3. 最短编辑距离:`algorthms/dp/editDistance`      
4. viterbi解码:`algorthms/dp/viterbi`            
5. 钢条切割:`algorthms/dp/rodcut`      
6. 减绳子:`algorthms/dp/foroffer/question14`    
7. 最长回文串:`leetcode/5_longest-palindromic-subsing`   

